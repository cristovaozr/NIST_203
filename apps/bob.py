#!/usr/bin/env python3
#
# bob.py - Encaps user of the ML-KEM key exchange procedure
#
# Author: Cristóvão Zuppardo Rufino <cristovao.rufino@ufpe.br>, <cristovaozr@gmail.com>
#
# License: Please see LICENSE file for the licensing of this work
#

import sys
import logging
import argparse
import json
import socket
import time

from mlkem.implementation.mlkem import MLKEM
from mlkem.auxiliary.constants import FIPS203MLKEM512

logging.basicConfig(level=logging.DEBUG)


def get_argparse() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-p", "--params",
        metavar="param_file",
        help="Parameter file",
        default="bob_params.json"
    )
    parser.add_argument(
        "-a", "--address",
        metavar="alice_address_full",
        help="Alice's address in IP:PORT format",
        default=None
    )

    return parser


def receive_ek_from_alice(port: int) -> bytes:
    EK_SIZE_IN_BYTES = 800

    with socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM) as bob_socket:
        bob_socket.bind(("localhost", port))
        bob_socket.listen()
        bob_conn, bob_addr = bob_socket.accept()
        with bob_conn:
            ek = bytearray()
            while len(ek) < EK_SIZE_IN_BYTES:
                data = bob_conn.recv(EK_SIZE_IN_BYTES - len(ek))
                if not data:
                    break
                ek += data

            return ek


def send_alice_ciphered_text(address: str, port: int, c: bytes) -> bool:
    time.sleep(3)
    try:
        with socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM) as alice_socket:
            alice_address = (address, port)
            alice_socket.connect(alice_address)
            alice_socket.sendall(c)

        return True

    except ConnectionRefusedError as e:
        return False


def main() -> int:
    logger = logging.getLogger("main")
    logger.debug("Parsing parameters")
    parser = get_argparse()
    args = parser.parse_args(sys.argv[1:])
    print(args)
    param_file = args.params

    logger.debug("Starting bob app, with FIPS203MLKEM512 configuration")
    logger.debug(f"Loading 'm' value from {param_file}")
    try:
        with open(param_file, "r") as fp:
            params = json.load(fp)

    except FileNotFoundError as e:
        logger.error(f"Could not find parameter file {param_file}! Aborting!")
        return 1

    bob_mlkem = MLKEM(FIPS203MLKEM512())
    # FIXME: Inputs "m" should be generated by an approved RBG as recommended
    # in SP 800-90A, SO 800-90B and SP 800-90C. For now these values are fixed in order
    # to allow debugging
    m = params.get("m", None)

    if m is None:
        logger.error(f"Missing parameters in {param_file}! Please fix this!")
        return 1

    m = bytearray.fromhex(m)

    alice_address_full = args.address
    if alice_address_full is None:
        logger.error("No address provided for Alice! She will be sad :'(")
        return 1

    listen_port = 0
    connections = params.get("connections", None)
    if connections:
        listen_port = connections.get("port", 0)
    else:
        logger.error(f"No 'connection' section in {param_file}! Please fix this!")
        return 1
    if listen_port < 1024:
        logger.error(f"Port provided is {listen_port}, which cannot be easily used. Please choose another port!")
        return 1

    alice_address = alice_address_full.split(":")[0]
    alice_port = int(alice_address_full.split(":")[1])

    logger.debug("Waiting for Alice's ek")
    alice_ek = receive_ek_from_alice(listen_port)

    logger.debug(f"Received {len(alice_ek)} bytes from Alice!")

    logger.debug("Encaps with Alice's ek and the message m")
    bob_k, c = bob_mlkem.Encaps(alice_ek, m)

    logger.debug("Sending Alice the ciphered text")
    logger.debug(f"The amount of data we are sending is {len(c)} bytes")
    if not send_alice_ciphered_text(alice_address, alice_port, c):
        logger.debug("Alice was not available to receive our ciphered text. Sad :(")
        return 1

    logger.debug("All done! Now Alice should have the same key as Bob")
    logger.debug(f"The key is {bob_k.hex()}")

    return 0


if __name__ == "__main__":
    sys.exit(main())
