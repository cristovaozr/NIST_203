#
# main.py - Main application to test functions of the FIPS.203 library
#
# Author: Cristóvão Zuppardo Rufino <cristovao.rufino@ufpe.br>, <cristovaozr@gmail.com>
#
# License: Please see LICENSE file for the licensing of this work
#
from auxiliary.constants import FIPS203MLKEM512
from auxiliary.general_algorithms import *
from auxiliary.crypto_functions import *
from kpke.kpke import KPKE
from misc.print_helper import bytes_to_hex
from ntt.ntt import (NTT, INTT, MultiplyNTTs)

from auxiliary.naive_algorithms import (naive_ntt, naive_intt)

if __name__ == "__main__":
    print("Hello world!")

    # print(BitsToBytes("1010000000000101"))
    # print(BytesToBits(b'\xa0\x05'))
    #
    # print(f"PRF(): {bytes_to_hex(PRF(2, b'01234567890123456789012345678901', b'a'))}")
    # print(f"PRF3(): {bytes_to_hex(PRF3(b'01234567890123456789012345678901', b'a'))}")
    #
    # print(f"H(): {bytes_to_hex(H(b'treta'))}")
    # print(f"J(): {bytes_to_hex(J(b'treta'))}")
    # print(f"G(): {bytes_to_hex(G(b'treta'))}")

    # y = 1000
    # m = 11
    # yd = Decompress(y, m)
    # ydc = Compress(yd, m)
    # print(f"{y=}, {m=}, {yd=}, {ydc=}")
    #
    # yc = Compress(y, m)
    # ycd = Decompress(yc, m)
    # print(f"{y=}, {m=}, {yc=}, {ycd=}")

    # m = 3
    # fe = [0]*256
    # fe[0] = 8
    # fe[1] = 6
    # fe[2] = 5
    # fe[3] = 4
    #
    # be = BytesEncode(fe, m)
    # bd = BytesDecode(be, m)

    # print(bd)

    # b = b'thequickbrownfoxjumpsoverthelazido'
    # a_hat = SampleNTT(b)
    # print(a_hat)

    # f = [0, 1, 2, 3] * 64
    # # g = [4, 3, 2, 1] * 64
    # g = [0]*256
    # g[0] = 1
    # # f = [1]*256
    # f_hat = NTT(f)
    # g_hat = NTT(g)

    # z_hat = MultiplyNTTs(f_hat, g_hat)
    #
    # z = INTT(z_hat)
    # print(z)

    # s = [1, 0, 3328, 1, 3328, 0, 0, 2, 0, 3328, 1, 0, 2, 2, 0, 3328, 3328, 2, 1, 3328, 3328, 1, 3328, 1, 0, 0, 1, 3328, 3328, 1, 3327, 0, 3328, 0, 1, 1, 0, 1, 0, 0, 3328, 3327, 1, 0, 3328, 0, 1, 1, 3328, 0, 3328, 2, 1, 0, 0, 2, 1, 2, 1, 3328, 0, 1, 3326, 3327, 1, 0, 0, 2, 3326, 3328, 0, 3328, 3328, 3327, 1, 3328, 3328, 3327, 0, 0, 1, 2, 3, 2, 1, 3327, 3328, 0, 3, 1, 0, 0, 2, 1, 0, 0, 3328, 3327, 0, 0, 1, 1, 0, 1, 1, 3328, 3327, 1, 1, 3328, 0, 0, 0, 3327, 3328, 2, 1, 0, 3328, 1, 3327, 1, 0, 0, 3327, 3328, 2, 0, 0, 0, 1, 0, 1, 3328, 0, 1, 0, 3328, 3328, 1, 1, 1, 3328, 2, 1, 1, 1, 3328, 3328, 3328, 3328, 3328, 2, 1, 1, 3328, 1, 0, 0, 1, 3328, 1, 3328, 1, 1, 2, 3, 0, 0, 0, 3328, 0, 0, 1, 2, 3328, 3327, 3327, 1, 1, 3328, 3328, 3328, 1, 1, 2, 0, 3328, 1, 3328, 3328, 3327, 0, 0, 0, 3328, 3328, 1, 0, 1, 3326, 3327, 3328, 3327, 1, 2, 3326, 3328, 1, 0, 0, 0, 1, 0, 0, 3, 3, 3327, 1, 3328, 3328, 0, 0, 2, 1, 3328, 0, 0, 0, 0, 0, 0, 3328, 0, 0, 1, 0, 0, 0, 3328, 3328, 3328, 0, 3327, 0, 1, 3328, 3328, 0, 3328, 0, 2, 0, 0, 1, 3328]
    # s_hat = NTT(s)
    # # print(s_hat)
    #
    # poly_f = [1, 1, 2, 3] * 64
    # poly_g = [1] + [0] * 255
    # f_hat = NTT(poly_f)  # naive_ntt(poly_f)
    # g_hat = NTT(poly_g)  # naive_ntt(poly_g)
    # # z_hat = [f*g % 3329 for f,g in zip(f_hat, g_hat)]
    # z_hat = MultiplyNTTs(f_hat, g_hat)
    # poly_z = INTT(z_hat)
    # # poly_z = naive_intt(z_hat)
    # print(poly_z)

    # v = [600, 669, 1463, 1988, 2661, 2401, 1809, 2360, 352, 1372, 2581, 247, 2484, 1425, 232, 1772, 2463, 2480, 911,
    #      1705, 581, 1200, 2947, 693, 1883, 1279, 2146, 2354, 1078, 2587, 100, 2836, 3060, 2332, 1478, 2153, 2875, 2252,
    #      1746, 463, 2473, 2354, 1959, 763, 1157, 1161, 1868, 1020, 1223, 2808, 3001, 862, 1884, 2868, 2488, 2666, 2277,
    #      2659, 2631, 3192, 1715, 594, 2859, 874, 923, 2079, 2903, 1768, 167, 2181, 1141, 464, 2333, 2141, 1791, 1739,
    #      687, 2152, 1230, 2282, 269, 2901, 4, 2676, 1858, 1266, 2267, 515, 414, 1528, 2223, 1743, 1478, 188, 219, 292,
    #      267, 278, 134, 280, 2698, 1010, 2367, 461, 2587, 3083, 1015, 3302, 2049, 1128, 526, 1395, 2672, 2354, 628,
    #      2537, 1983, 1533, 3301, 1503, 479, 3135, 857, 235, 2570, 1048, 2798, 1473, 993, 130, 1171, 2058, 2316, 1958,
    #      3001, 233, 2048, 2224, 1450, 2712, 304, 1611, 3148, 2690, 571, 2102, 2611, 2430, 1063, 2245, 241, 844, 2360,
    #      1595, 2625, 470, 1939, 461, 1937, 1842, 672, 551, 1624, 1023, 1475, 955, 1345, 512, 1735, 3192, 729, 1619, 391,
    #      2047, 2317, 3266, 3153, 1233, 131, 1249, 497, 1253, 2006, 928, 430, 965, 2438, 3228, 2880, 1269, 1902, 3007,
    #      2647, 207, 1924, 2340, 2735, 743, 729, 3147, 3103, 437, 3095, 2247, 2736, 3230, 3199, 91, 3030, 1211, 2374,
    #      524, 3187, 2252, 1222, 152, 3223, 2390, 3151, 2208, 2861, 873, 3229, 3201, 784, 110, 1227, 2389, 807, 895,
    #      2484, 2395, 2063, 846, 3280, 1325, 203, 1742, 2342, 1601, 277, 584, 2911, 2163, 1208, 3155, 2506, 755, 2306,
    #      2319, 3264, 1283, 2109, 2649, 3046, 523]
    #
    # vv = [3, 3, 7, 10, 13, 12, 9, 11, 2, 7, 12, 1, 12, 7, 1, 9, 12, 12, 4, 8, 3, 6, 14, 3, 9, 6, 10, 11, 5, 12,
    #                0, 14, 15, 11, 7, 10, 14, 11, 8, 2, 12, 11, 9, 4, 6, 6, 9, 5, 6, 13, 14, 4, 9, 14, 12, 13, 11, 13,
    #                13, 15, 8, 3, 14, 4, 4, 10, 14, 8, 1, 10, 5, 2, 11, 10, 9, 8, 3, 10, 6, 11, 1, 14, 0, 13, 9, 6, 11,
    #                2, 2, 7, 11, 8, 7, 1, 1, 1, 1, 1, 1, 1, 13, 5, 11, 2, 12, 15, 5, 0, 10, 5, 3, 7, 13, 11, 3, 12, 10,
    #                7, 0, 7, 2, 15, 4, 1, 12, 5, 13, 7, 5, 1, 6, 10, 11, 9, 14, 1, 10, 11, 7, 13, 1, 8, 15, 13, 3, 10,
    #                13, 12, 5, 11, 1, 4, 11, 8, 13, 2, 9, 2, 9, 9, 3, 3, 8, 5, 7, 5, 6, 2, 8, 15, 4, 8, 2, 10, 11, 0, 15,
    #                6, 1, 6, 2, 6, 10, 4, 2, 5, 12, 0, 14, 6, 9, 14, 13, 1, 9, 11, 13, 4, 4, 15, 15, 2, 15, 11, 13, 0,
    #                15, 0, 15, 6, 11, 3, 15, 11, 6, 1, 15, 11, 15, 11, 14, 4, 0, 15, 4, 1, 6, 11, 4, 4, 12, 12, 10, 4, 0,
    #                6, 1, 8, 11, 8, 1, 3, 14, 10, 6, 15, 12, 4, 11, 11, 0, 6, 10, 13, 15, 3]
    #
    # v_comp = [Compress(a, 4) for a in v]
    # print(v_comp)
    #
    # for i, (a, b) in enumerate(zip(v_comp, vv)):
    #     if a != b:
    #         print(f"PAU na posição {i}-ésima")

    # u = [2986, 1198, 1432, 899, 1128, 2376, 1701, 1603, 1576, 918, 615, 2560, 1165, 1330, 310, 3045, 3305, 916, 328,
    #         308, 3107, 957, 273, 2879, 1605, 1576, 994, 884, 539, 994, 2489, 1507, 1466, 1181, 2578, 2233, 660, 2870,
    #         763, 186, 2258, 2683, 379, 737, 2184, 292, 554, 2753, 776, 1584, 1776, 2544, 205, 1052, 2990, 2651, 2963,
    #         1078, 402, 2590, 3299, 1091, 1689, 3076, 1156, 2880, 1538, 938, 265, 836, 1908, 590, 267, 2205, 616, 3127,
    #         820, 1363, 302, 1930, 903, 3147, 1422, 2751, 361, 1130, 426, 2864, 1237, 2880, 778, 1959, 828, 482, 1756,
    #         2449, 71, 3005, 1130, 2824, 135, 721, 431, 2629, 72, 2668, 2839, 1764, 311, 1434, 2493, 2069, 2114, 2368,
    #         129, 725, 2845, 707, 1568, 3219, 2873, 2311, 443, 1698, 3217, 2663, 724, 3019, 459, 2095, 1951, 1577, 816,
    #         1734, 1324, 532, 1511, 2848, 3307, 2881, 1429, 1102, 2413, 2891, 2930, 2935, 1539, 1825, 2089, 33, 2745,
    #         432, 1582, 1210, 3123, 1366, 3235, 3225, 3207, 1347, 3152, 381, 915, 536, 3270, 1858, 2899, 1259, 3249,
    #         1862, 1875, 2617, 2442, 1651, 1526, 1955, 1577, 1189, 1954, 120, 2147, 1690, 312, 2115, 1460, 277, 2103,
    #         2220, 844, 461, 190, 949, 2514, 2508, 1528, 2286, 2966, 1293, 2604, 78, 3217, 1188, 227, 2050, 1887, 213,
    #         119, 2268, 269, 793, 740, 122, 1241, 119, 1046, 530, 1356, 994, 2076, 84, 2503, 1021, 588, 267, 2553, 802,
    #         1757, 419, 3181, 2218, 2360, 12, 1043, 2194, 2058, 2432, 2886, 492, 3304, 1645, 3008, 1780, 1610, 1812,
    #         1341, 2171, 2241, 2450, 2438, 3056, 2519, 284, 2604, 365, 507, 385]

    # u_comp = [Compress(a, 10) for a in u]
    # for i, (a, b) in enumerate(zip(v_comp, vv)):
    #     if a != b:
    #         print(f"PAU na posição {i}-ésima")
    # print(u_comp)

    my_kpke = KPKE(FIPS203MLKEM512())
    ekpke, dkpke = my_kpke.KPKE_KeyGen(b'0xa5'*32)

    print(ekpke)
    print(dkpke)
